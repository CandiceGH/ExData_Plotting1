1=1
1+1
a=1 1 1 1 1
a=(1 1 1 1 1)
a=1+2
b=2+3
a+b
a=1+1
b=2+7
a=b
a=1+1
a+b
help base
?base
library
package
unpack
package(grid)
library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rstudio", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
a <- available.packages()
View(a)
View(a)
install.package ("slidify")
install.packages ("slidify")
install.packages("ggplot2")
library(ggplot2)
search()
install.packages('KernSmooth R')
library(KernSmooth R)
library(KernSmoothR)
library(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
package()
install.packages("swirl")
library('swirl')
swirl()
swirl()
library(swirl)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0, 10, by=0.5)
my_seq<-seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5, 55, -10, 6)
tf<-num_vect < 1
tf
num_vect>=6
my_char<-c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name<-c(my_char, "Candice")
my_name
(my_name, collapse = " ")
paste(my_name, collapse = " ")
Try paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
bye
bye()
swirl()
bye()
swirl()
TRUE==TRUE
(FALSE == TRUE) == FALSE
6==7
6>7
6<7
10<=10
5!=7
5!=7
5!==7
!5==7
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8||6!=8&&4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints >5
which(int>7)
which(ints>7)
any(ints>0)
any(ints<0)
all(ints>0)
2
bye
bye()
swirl
swirl()
Sys.Data()
Sys.Date()
mean(c(2,4,6))
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
bye()
swirl()
rm(list=ls())
d1<-Sys.Date()
class(Sys.Date())
class(Sys.Date
)
class(d1
)
unclass(d1)
d1
d2<-as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2<-as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3<-"October 17, 1986 08:24"
t4<-strptime(t3,'%B %d,%Y %H:%M')
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time()-t1
difftime(Sys.time(),t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(y=cars$speed,x=cars$dist)
plot(cars)
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed", ylab="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,submain="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
?par
plot(cars,col=2)
plot(cars,xlim=c(10,15))
?points
plot(cars,pch=2)
load(mtcars)
data(mtcars)
play()
summary(mtcars)
head(mtcars)
dim(mtcars)
nxt()
?boxplot
boxplot(formula=mpg~cyl,data=mtcars)
hist(mtcars$mpg)
x<-c("a","b","c","d")
for (i in 1:4){}
for (i in 1:4){}
x<-c("a","b","c","d")
for (i in 1:4){
print(x[1])
}
x<-c("a","b","c","d")
for (i in 1:4){
print(x[i])
}
for (i in seq_along(x)) print (x[i])
for (letter in x) print(letters)
for (letter in x) print(letter)
library(datasets)
data("iris")
?iris
View(iris)
s<-split(iris,iris$Species)
str(s)
lapply(s,function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
lapply(s,function(x) colMeans(x[, "virginica"]))
mean(s$virginica)
s<-split(iris)
s<-split(iris,iris$Species)
s
mean(iris$Sepal.Length~virginica)
mean(iris$Sepal.Length~virginica,rm.na=TRUE)
lappy(s, mean,rm.na=TRUE)
lapply(s, mean,rm.na=TRUE)
as.numeric(s)
lapply(iris,s, mean,rm.na=TRUE)
head(isis)
head(iris)
s<-split(iris,iris$Sepal.Length)
stru(s)
str(s)
s<-split(iris,iris$Species)
str(s)
mean(s$virginica$Sepal.Length)
head(s)
head(iris)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
apply(iris[,iris$Species],2,mean)
apply(iris[,iris$Species],1,mean)
View(iris)
apply(s[, 1:4], 2, mean)
apply(s[,], 2, mean)
apply(s[,], 1, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg~ mtcars$cyl, mean)
split(mtcars,[,4])
split(mtcars,mtcars$hp)
split(mtcars,mtcars$cyl)
t<-split(mtcars,mtcars$cyl)
lapply(t,mean)
tapply(t,mean)
mapply(t,mean)
sapply(t,mean)
sapply(t,mean,rm.na=TRUE)
sapply(s, function(x) colMeans(x[, c("4", "6", "8")]))
tapply(mtcars$hp, mtcars$cyl, mean)
abs(mean(mtcars[mtcarscyl==4,]hp) - mean(mtcars[mtcarscyl==8,]hp))
209.21429-82.63636
debug(ls)
ls()
mean(s$virginica$Sepal.Length)
mean(t$`8`$hp)
mean(t$`4`$hp)
abs(mean(t$`8`$hp)-mean(t$`4`$hp))
install.packages("RStoolbox")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
install.packages("swirl")
install.packages("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug(ppm)
summary(low)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline(v=12, lwd = 2)
abline(v=median(ppm), col = "magenta, lwd = 4)
)
)
bye
end
exit
quit
)
))))))
swirl()
library(swirl)
swirl()
abline(v=median(ppm), col = "magenta", lwd = 4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow = c(2,1), mar = c(4,4,2,1))
east <- subset(pollution, lm(region ~ east))
east <- subset(pollution, lm(region = "east"))
east <- subset(pollution, region = "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
hist(subset(pollution, region == "west"), col = "green")
hist(subset(pollution$pm25, region == "west"), col = "green")
hist(pollution$pm25, region == "west", col = "green")
hist(pollution$pm25(subset(pollution, region == "west")), col = "green")
hist(west$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col = "green")
info()
with(pollution(plot(latitude, pm25)))
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd = 2, lty = 2)
par(mfrow = c(1,2), mar = c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
setwd("~/Documents/zCandice/Private/Coursera/Data Science Specialization/4_Exploratory Data Analysis/CourseProjects/Project1/exdataplotting1")
#     PLOT 4: Multiple base plots summarizing four sets of data
#     Candice, November 04, 2015
#
#     Dataset: Individual household electric power consumption Data Set: Electric power consumption [20Mb]
#
#     Description: Measurements of electric power consumption in one household with a one-minute
#     sampling rate over a period of almost 4 years. Different electrical quantities and some sub-metering
#     values are available. Please see the README.md within this folder for more information on the variables
#     used to create these plots, including their units.
## 1. Workspace set-up and download of the data.
# 1a. Setting local directory:
localdir<-getwd()       # saves the local directory address
setwd(localdir)         # sets the work space to match the local address
getwd()                 # checks the above is true
# 1b. Check to see if i) raw Power Consumption and ii) working data storage directories exists, if FALSE, create them:
if (!file.exists("exdatahouseholdpower")) {dir.create("exdatahouseholdpower")}
if (!file.exists("data")) {dir.create("data")}
list.files("./")      # Check to ensure folder is created
# 1c. Downloading zip file from the internet:
## Checking to see if data has already been downloaded. If yes, continue, if no, download.
if (file.exists("./exdatahouseholdpower/consumption.zip")) {
print("Power data available")
}       else {
print("Downloading and unzipping Power data...")
Url <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(Url, destfile = "./exdatahouseholdpower/consumption.zip", mode = "wb")
dateDownloaded <- date()
list.files("./exdatahouseholdpower")
# 1d. Unzipping data file and storing it in a working data directory. Rename the folder to be simple:
unzip("./exdatahouseholdpower/consumption.zip", exdir = "./data")
list.files("./data")
name<-as.character(list.files("./data"))
rm(name, Url)
}
# 1e. Check to see if raw data is present, if TRUE, continue.
if (file.exists("./exdatahouseholdpower/consumption.zip")) print("Data available") else stop("!!!Need data!!!")
## 2. Loading data in R workspace from only the dates 2007-02-01 and 2007-02-02:
# 2a. Reading in the first 10 lines of the data to see the first date and time.
data10<-read.table("./data/household_power_consumption.txt", sep = ";", nrows = 10, header = T)
# 2b. Set dates and times needed to 'subset' data when loading into R
firstDateTime <- strptime("2006-12-16 17:24:00", "%Y-%m-%d %H:%M:%S")
beginDateTime <- strptime("2007-02-01 00:01:00", "%Y-%m-%d %H:%M:%S")
# 2c. Calculate which lines to read in
begin <- beginDateTime - firstDateTime
beginLine <- as.numeric(begin) * 24 * 60 # first line to read in
numLines <- 48 * 60 # total number of minutes in 48 hours, total number of rows to read in
# 2d. Reading in only the pertinent data. The missing values '?' are converted to 'NA'.
data<-read.table("./data/household_power_consumption.txt", sep = ";", skip = beginLine, nrows = numLines, na.strings = "?")
# 2e. Creating clean and tidy data set.
# Renaming the columns after they're cut during extraction.
colnames<-names(data10); names(data)=colnames
# Converting the Date and Time variables to Date/Time classes in R using the strptime() and as.Date() functions.
SetTime <-strptime(paste(data$Date, data$Time, sep=" "),"%d/%m/%Y %H:%M:%S")
#finalData <- cbind(SetTime, data)
data$Date<-SetTime
data$Time<-SetTime
data$Date<-as.Date(data$Date)
#str(data)
# 3. Plot 4: Multiple base plots summarizing four sets of data
# opening png graphic device
png("plot4.png", width = 480, height = 480)
# setting multiple base plot framework
par(mfrow = c(2, 2))
# first plot
with(data, plot(Time, Global_active_power, type = "l", ylab = "Global Active Power", xlab = ""))
# second plot
with(data, plot(Time, Voltage, type = "l", ylab = "Voltage", xlab = "datetime"))
# third plot
with(data, plot(Time, Sub_metering_1, type = "l", ylab = "Energy sub metering", xlab = ""))
with(data, lines(Time, Sub_metering_2, col = "red"))
with(data, lines(Time, Sub_metering_3, col = "blue"))
legend("topright", lty = 1, lwd = 2, col = c("black", "red", "blue"), bty = "n", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
# forth plot
with(data, plot(Time, Global_reactive_power, type = "l", xlab = "datetime"))
# closing png graphic device
dev.off()
# ylab = "Global_reactive_power"
# 4. Cleaning house:
rm(begin, beginDateTime, beginLine, colnames, firstDateTime, numLines, SetTime, data10, localdir)
setwd("~/Documents/ExData_Plot/ExData_Plotting1")
